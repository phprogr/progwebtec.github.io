<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WTAT2 Topics on Prof. Dr. Barne Kleinen</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/</link><description>Recent content in WTAT2 Topics on Prof. Dr. Barne Kleinen</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://bkleinen.github.io/classes/ws2017/wtat2/topics/index.xml" rel="self" type="application/rss+xml"/><item><title>A1 - Rails, ActiveRecord and Associations</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord-example/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord-example/</guid><description>Assignment 1 Example: IMI-Calendar This is an example for Assignment 1
Create a project description and backlog Currently, there is no channel to promote events offered for a range of IMI-Students across several classes. The Web-Application should provide a simple interface for creating and promoting events. Events should be shown on a web site. In addition to that, it should be possible to subscribe to events via calendar applications or as an atom feed.</description></item><item><title>A1 - Rails, ActiveRecord and Associations</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a1-activerecord/</guid><description>Assignment 1 Example
Write down your project description/vision. Create a backlog.
Find 2-3 central model classes / resources for your project and create them - model, views and controller within a new rails application. Implement at least one model association and make it visible in the view.
Create a project description and backlog Provide a short summary of what your web-app should do.
Then, write down all the user stories you can think of.</description></item><item><title>Assignment 2 - Authentication and Code Style</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a2-authentication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a2-authentication/</guid><description>The second assignment is to implement an authentication for your application. Furthermore, you learn how to enforce code styling for your project.
Integrate Bootstrap Integrate Bootstrap into your Application. Use Bootstrap 4 (currently in beta), and comes with sass integration and it&amp;rsquo;s own ruby gem:
You don&amp;rsquo;t need to change any styling yet.
Documentation in the Example Project See the IMI-Calendar-App Commit for Bootstrap integration. Testing with RSpec Integrate the Rspec Testing Framework and develop at least one happy path feature test for each finished user story you&amp;rsquo;ve completed so far.</description></item><item><title>Assignment 3 - Search Functionality, Postgres and Docker (and some more Bootstrap)</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a3-search-database-docker/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a3-search-database-docker/</guid><description>Implement Search Functionality The main Assignment for this sprint is to implement a search functionality for your app. Thus, find (or create) userstorys that you will need a search functionality for.
For the search functionality itself, you&amp;rsquo;ll find a tutorial in Chapter 4 of the Book, which focusses on leveraging Postgres indices. Alternatively, you can decide to learn more about the ActiveRecord Query Language. Choose one, read the linked material. Even if you decide to use ActiveRecord Query Language you should read the first part of Chapter 4 where you find info about building the search itself into rails and generating test data.</description></item><item><title>Assignment 4 - Java Script and Deployment</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a4-ci-cd-javascript/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a4-ci-cd-javascript/</guid><description>Continuous Integration and Deployment Setup Travis CI to build your project automatically after each push. See https://docs.travis-ci.com/user/docker/.
Setup an Automatated Deployment after a successful build. See https://docs.travis-ci.com/user/deployment
I&amp;rsquo;ve created two examples:
direct deployment of rails on heroku in https://github.com/htw-imi-rails-examples/notes-deploy deployment on heroku with docker in https://github.com/htw-imi-rails-examples/notes-deploy-docker AJAX Find a place - find or create a story - where a little bit of JavaScript is useful in your Application. You find a couple of examples in the Working with JavaScript in Rails Guide which is also the required reading for next week.</description></item><item><title>Assignment 5 - External APIs and Rails Security</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a5-api-security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a5-api-security/</guid><description>External APIs Research possible external APIs that might be useful for your project (e.g. a weather api for a hiking site enabling you to show the current weather).
Find or define Stories in your Backlog to use the API. It doesn&amp;rsquo;t have to be much, the focus is more on using the API than building a lot of new features into your app.
Write an Adapter and Tests for the API as discussed in class.</description></item><item><title>Assignment 6 - Choose your own topic</title><link>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a6-choose-your-own/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bkleinen.github.io/classes/ws2017/wtat2/topics/a6-choose-your-own/</guid><description>Choose your own topic Choose your one, two (or more) stories from your backlog that you like to do to finish your project for this term.
Add code coverage Add the Gem simplecov to your Gemfile and include it in your tests according to the gem documentation. Aim for an about 80% test coverage.
Don&amp;rsquo;t forget the tests Don&amp;rsquo;t forget to write tests for your new features and to groom your test suite along the way.</description></item></channel></rss>